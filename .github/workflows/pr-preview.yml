name: üìù Deploy PR Preview

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: üèó Checkout
        uses: actions/checkout@v4

      - name: üèó Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üèó Build for preview
        run: npm run build:preview

      - name: üöÄ Deploy to GitHub Pages branch
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          destination_dir: pr-${{ github.event.pull_request.number }}
          keep_files: true

      - name: üí¨ Comment preview URL
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            // Use GitHub Pages URL for previews, not custom domain
            const previewUrl = `https://desktop-commander.github.io/main-web/pr-${prNumber}/`;
            
            console.log(`PR Number: ${prNumber}`);
            console.log(`Preview URL: ${previewUrl}`);
            
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const botComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('üìù PR Preview')
            );

            const commentBody = `üìù PR Preview deployed!

**Preview URL**: ${previewUrl}

This preview will be available until the PR is merged or closed.

<!-- pr-preview-comment -->`;

            if (botComment) {
              console.log('Updating existing comment');
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody,
              });
            } else {
              console.log('Creating new comment');
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody,
              });
            }
