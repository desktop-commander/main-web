name: PR Preview (Fixed)

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

jobs:
  preview:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build for preview
        run: |
          # Build with PR-specific base path
          npx vite build --base="/main-web/"
          
          # Create a directory structure that includes both main site and PR
          mkdir -p combined-build
          
          # If there's existing content, we'd merge it here
          # For now, just put PR content in a subdirectory
          mkdir -p combined-build/pr-${{ github.event.pull_request.number }}
          cp -r docs/* combined-build/pr-${{ github.event.pull_request.number }}/
        
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './combined-build'
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const previewUrl = `https://desktop-commander.github.io/main-web/pr-${prNumber}/`;
            
            const comment = `## ðŸš€ PR Preview Deployed!
            
            **Preview URL:** ${previewUrl}
            
            This preview will be updated automatically when you push new commits to this PR.`;
            
            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });
            
            const existingComment = comments.data.find(c => 
              c.user.login === 'github-actions[bot]' && c.body.includes('PR Preview Deployed')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment
              });
            }
